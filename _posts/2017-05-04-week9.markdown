---
layout:     post
title:      "Week 9"
subtitle:   "Risk Assessment"
date:       2017-05-04
author:     "Road to Nowhere"
header-img: "img/roo.JPG"
---

A blog post with a table that describes the potential security risks of the project and a reflection of how the current architecture accounts for or could be modified to account for these risks.

So for this week we were asked to show a risk assessment table, which is relevant to our website and some ways in which we have removed the risk they possess.

# Risk assessment table

Here is our risk asessment table below;

<img src="{{ site.baseurl }}/images/blog/Week9/ImprovRiskTable.png" alt="Risk Table">

# How we'eve managed to prevent some of these etc

Input sanitisation,
As NoSQL injections are possible when using such a database, user entered input will be sanitisied before being passed to any NoSQL based databases. Our user input is shielded from direct communication to the database by design, however you can never be too careful. 

Permisisons,
Only certain team members have access to certain aspects of the server and underlying code. Limiting who can modify and control code and data helps prevent not only potential malicious behaviour but also any possibly mistakes overlapping access can cause.

Back ups,
Almost all serious risks we have been able to identify can be either prevented or at very least minimized with regular back ups. By virtue of using Github any possible concerns that may come up can be rolled back to a point before the concern arose.

Notifications and warnings, 
More specific concerns relating to location information, such as large ranges when computing coordinates are hard to avoid with the tools we have avaiable. In such cases we would aim to minimise the impact rather than attempt to prevent it. In the case a users location range is quite large they would be notified or warned that the input and output of the system may not reflect what is intented.

Securing compromised user data, 
As mentioned above issues like these inherently lie outside the scope of things we can prevent, so again we wold aim to detect the trigger for these risks as soon as possible and notify affected users promptly and follow earlier mentioned techniques to restore anything that may have been affected within the system.

Additional prevention methods will rely on common sense and predicting possible problems that may arise as they do and acting on any unforeseen issues promptly.

etc
